{"ast":null,"code":"// 전략 데이터 (실제로는 API나 데이터베이스에서 가져올 수 있음)\nexport const strategies = [{\n  id: 'public-small',\n  name: '중소형 공공분양',\n  description: '공공주택 중 소형 평수 위주 청약',\n  minPoints: 40,\n  maxPoints: 100,\n  successRate: 75,\n  region: '전국',\n  householdType: 'single',\n  category: 'public',\n  difficulty: 'easy'\n}, {\n  id: 'public-medium',\n  name: '중형 공공분양',\n  description: '공공주택 중형 평수 청약',\n  minPoints: 60,\n  maxPoints: 100,\n  successRate: 60,\n  region: '전국',\n  householdType: 'couple',\n  category: 'public',\n  difficulty: 'medium'\n}, {\n  id: 'private-special',\n  name: '민간 특별공급',\n  description: '민간분양 특별공급 청약',\n  minPoints: 70,\n  maxPoints: 100,\n  successRate: 45,\n  region: '서울',\n  householdType: 'family',\n  category: 'private',\n  difficulty: 'hard'\n}, {\n  id: 'local-public',\n  name: '지방 공공분양',\n  description: '지방 공공주택 청약',\n  minPoints: 30,\n  maxPoints: 100,\n  successRate: 85,\n  region: '지방',\n  householdType: 'single',\n  category: 'public',\n  difficulty: 'easy'\n}, {\n  id: 'newlywed',\n  name: '신혼부부 특별공급',\n  description: '신혼부부 전용 특별공급',\n  minPoints: 50,\n  maxPoints: 100,\n  successRate: 70,\n  region: '전국',\n  householdType: 'couple',\n  category: 'special',\n  difficulty: 'medium'\n}, {\n  id: 'youth-special',\n  name: '청년 특별공급',\n  description: '청년 전용 특별공급',\n  minPoints: 45,\n  maxPoints: 100,\n  successRate: 65,\n  region: '전국',\n  householdType: 'single',\n  category: 'special',\n  difficulty: 'medium'\n}];\n\n// 시뮬레이션 실행\nexport const runSimulation = (userPoints, input) => {\n  // 사용자 조건에 맞는 전략 필터링\n  const eligibleStrategies = strategies.filter(strategy => {\n    const pointsMatch = userPoints >= strategy.minPoints && userPoints <= strategy.maxPoints;\n    const householdMatch = strategy.householdType === input.householdType || strategy.householdType === 'single';\n    const regionMatch = strategy.region === '전국' || strategy.region === input.region;\n    return pointsMatch && householdMatch && regionMatch;\n  });\n\n  // 추천 전략 (성공률 높은 순)\n  const recommendedStrategies = eligibleStrategies.sort((a, b) => b.successRate - a.successRate).slice(0, 3);\n\n  // 대안 전략 (가점 요구사항이 낮은 순)\n  const alternativeStrategies = strategies.filter(strategy => strategy.minPoints < userPoints).sort((a, b) => a.minPoints - b.minPoints).slice(0, 3);\n\n  // 전체 성공 확률 계산\n  const avgSuccessRate = eligibleStrategies.length > 0 ? eligibleStrategies.reduce((sum, strategy) => sum + strategy.successRate, 0) / eligibleStrategies.length : 0;\n  return {\n    userPoints,\n    recommendedStrategies,\n    alternativeStrategies,\n    successProbability: avgSuccessRate\n  };\n};\n\n// 전략별 상세 정보\nexport const getStrategyDetails = strategyId => {\n  return strategies.find(strategy => strategy.id === strategyId);\n};\n\n// 난이도별 색상\nexport const getDifficultyColor = difficulty => {\n  switch (difficulty) {\n    case 'easy':\n      return '#4CAF50';\n    case 'medium':\n      return '#FF9800';\n    case 'hard':\n      return '#F44336';\n    default:\n      return '#757575';\n  }\n};\n\n// 성공률별 색상\nexport const getSuccessRateColor = rate => {\n  if (rate >= 70) return '#4CAF50';\n  if (rate >= 50) return '#FF9800';\n  return '#F44336';\n};","map":{"version":3,"names":["strategies","id","name","description","minPoints","maxPoints","successRate","region","householdType","category","difficulty","runSimulation","userPoints","input","eligibleStrategies","filter","strategy","pointsMatch","householdMatch","regionMatch","recommendedStrategies","sort","a","b","slice","alternativeStrategies","avgSuccessRate","length","reduce","sum","successProbability","getStrategyDetails","strategyId","find","getDifficultyColor","getSuccessRateColor","rate"],"sources":["/Users/ain/hana_sample/hana-subscription-calculator/src/utils/simulator.ts"],"sourcesContent":["import { Strategy, SimulationResult, PointCalculationInput } from '../types';\n\n// 전략 데이터 (실제로는 API나 데이터베이스에서 가져올 수 있음)\nexport const strategies: Strategy[] = [\n  {\n    id: 'public-small',\n    name: '중소형 공공분양',\n    description: '공공주택 중 소형 평수 위주 청약',\n    minPoints: 40,\n    maxPoints: 100,\n    successRate: 75,\n    region: '전국',\n    householdType: 'single',\n    category: 'public',\n    difficulty: 'easy'\n  },\n  {\n    id: 'public-medium',\n    name: '중형 공공분양',\n    description: '공공주택 중형 평수 청약',\n    minPoints: 60,\n    maxPoints: 100,\n    successRate: 60,\n    region: '전국',\n    householdType: 'couple',\n    category: 'public',\n    difficulty: 'medium'\n  },\n  {\n    id: 'private-special',\n    name: '민간 특별공급',\n    description: '민간분양 특별공급 청약',\n    minPoints: 70,\n    maxPoints: 100,\n    successRate: 45,\n    region: '서울',\n    householdType: 'family',\n    category: 'private',\n    difficulty: 'hard'\n  },\n  {\n    id: 'local-public',\n    name: '지방 공공분양',\n    description: '지방 공공주택 청약',\n    minPoints: 30,\n    maxPoints: 100,\n    successRate: 85,\n    region: '지방',\n    householdType: 'single',\n    category: 'public',\n    difficulty: 'easy'\n  },\n  {\n    id: 'newlywed',\n    name: '신혼부부 특별공급',\n    description: '신혼부부 전용 특별공급',\n    minPoints: 50,\n    maxPoints: 100,\n    successRate: 70,\n    region: '전국',\n    householdType: 'couple',\n    category: 'special',\n    difficulty: 'medium'\n  },\n  {\n    id: 'youth-special',\n    name: '청년 특별공급',\n    description: '청년 전용 특별공급',\n    minPoints: 45,\n    maxPoints: 100,\n    successRate: 65,\n    region: '전국',\n    householdType: 'single',\n    category: 'special',\n    difficulty: 'medium'\n  }\n];\n\n// 시뮬레이션 실행\nexport const runSimulation = (userPoints: number, input: PointCalculationInput): SimulationResult => {\n  // 사용자 조건에 맞는 전략 필터링\n  const eligibleStrategies = strategies.filter(strategy => {\n    const pointsMatch = userPoints >= strategy.minPoints && userPoints <= strategy.maxPoints;\n    const householdMatch = strategy.householdType === input.householdType || strategy.householdType === 'single';\n    const regionMatch = strategy.region === '전국' || strategy.region === input.region;\n    \n    return pointsMatch && householdMatch && regionMatch;\n  });\n\n  // 추천 전략 (성공률 높은 순)\n  const recommendedStrategies = eligibleStrategies\n    .sort((a, b) => b.successRate - a.successRate)\n    .slice(0, 3);\n\n  // 대안 전략 (가점 요구사항이 낮은 순)\n  const alternativeStrategies = strategies\n    .filter(strategy => strategy.minPoints < userPoints)\n    .sort((a, b) => a.minPoints - b.minPoints)\n    .slice(0, 3);\n\n  // 전체 성공 확률 계산\n  const avgSuccessRate = eligibleStrategies.length > 0 \n    ? eligibleStrategies.reduce((sum, strategy) => sum + strategy.successRate, 0) / eligibleStrategies.length\n    : 0;\n\n  return {\n    userPoints,\n    recommendedStrategies,\n    alternativeStrategies,\n    successProbability: avgSuccessRate\n  };\n};\n\n// 전략별 상세 정보\nexport const getStrategyDetails = (strategyId: string): Strategy | undefined => {\n  return strategies.find(strategy => strategy.id === strategyId);\n};\n\n// 난이도별 색상\nexport const getDifficultyColor = (difficulty: string): string => {\n  switch (difficulty) {\n    case 'easy': return '#4CAF50';\n    case 'medium': return '#FF9800';\n    case 'hard': return '#F44336';\n    default: return '#757575';\n  }\n};\n\n// 성공률별 색상\nexport const getSuccessRateColor = (rate: number): string => {\n  if (rate >= 70) return '#4CAF50';\n  if (rate >= 50) return '#FF9800';\n  return '#F44336';\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}