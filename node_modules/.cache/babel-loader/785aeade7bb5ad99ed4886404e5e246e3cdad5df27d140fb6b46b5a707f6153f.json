{"ast":null,"code":"// 전략 데이터 (실제로는 API나 데이터베이스에서 가져올 수 있음)\nexport const strategies=[{id:'public-small',name:'중소형 공공분양',description:'공공주택 중 소형 평수 위주 청약',minPoints:40,maxPoints:100,successRate:75,region:'전국',householdType:'single',category:'public',difficulty:'easy'},{id:'public-medium',name:'중형 공공분양',description:'공공주택 중형 평수 청약',minPoints:60,maxPoints:100,successRate:60,region:'전국',householdType:'couple',category:'public',difficulty:'medium'},{id:'private-special',name:'민간 특별공급',description:'민간분양 특별공급 청약',minPoints:70,maxPoints:100,successRate:45,region:'서울',householdType:'family',category:'private',difficulty:'hard'},{id:'local-public',name:'지방 공공분양',description:'지방 공공주택 청약',minPoints:30,maxPoints:100,successRate:85,region:'지방',householdType:'single',category:'public',difficulty:'easy'},{id:'newlywed',name:'신혼부부 특별공급',description:'신혼부부 전용 특별공급',minPoints:50,maxPoints:100,successRate:70,region:'전국',householdType:'couple',category:'special',difficulty:'medium'},{id:'youth-special',name:'청년 특별공급',description:'청년 전용 특별공급',minPoints:45,maxPoints:100,successRate:65,region:'전국',householdType:'single',category:'special',difficulty:'medium'}];// 시뮬레이션 실행\nexport const runSimulation=(userPoints,input)=>{// 사용자 조건에 맞는 전략 필터링\nconst eligibleStrategies=strategies.filter(strategy=>{const pointsMatch=userPoints>=strategy.minPoints&&userPoints<=strategy.maxPoints;const householdMatch=strategy.householdType===input.householdType||strategy.householdType==='single';const regionMatch=strategy.region==='전국'||strategy.region===input.region;return pointsMatch&&householdMatch&&regionMatch;});// 추천 전략 (성공률 높은 순)\nconst recommendedStrategies=eligibleStrategies.sort((a,b)=>b.successRate-a.successRate).slice(0,3);// 대안 전략 (가점 요구사항이 낮은 순)\nconst alternativeStrategies=strategies.filter(strategy=>strategy.minPoints<userPoints).sort((a,b)=>a.minPoints-b.minPoints).slice(0,3);// 전체 성공 확률 계산\nconst avgSuccessRate=eligibleStrategies.length>0?eligibleStrategies.reduce((sum,strategy)=>sum+strategy.successRate,0)/eligibleStrategies.length:0;return{userPoints,recommendedStrategies,alternativeStrategies,successProbability:avgSuccessRate};};// 전략별 상세 정보\nexport const getStrategyDetails=strategyId=>{return strategies.find(strategy=>strategy.id===strategyId);};// 난이도별 색상\nexport const getDifficultyColor=difficulty=>{switch(difficulty){case'easy':return'#4CAF50';case'medium':return'#FF9800';case'hard':return'#F44336';default:return'#757575';}};// 성공률별 색상\nexport const getSuccessRateColor=rate=>{if(rate>=70)return'#4CAF50';if(rate>=50)return'#FF9800';return'#F44336';};","map":{"version":3,"names":["strategies","id","name","description","minPoints","maxPoints","successRate","region","householdType","category","difficulty","runSimulation","userPoints","input","eligibleStrategies","filter","strategy","pointsMatch","householdMatch","regionMatch","recommendedStrategies","sort","a","b","slice","alternativeStrategies","avgSuccessRate","length","reduce","sum","successProbability","getStrategyDetails","strategyId","find","getDifficultyColor","getSuccessRateColor","rate"],"sources":["/Users/ain/hana_sample/hana-subscription-calculator/src/utils/simulator.ts"],"sourcesContent":["import { Strategy, SimulationResult, PointCalculationInput } from '../types';\n\n// 전략 데이터 (실제로는 API나 데이터베이스에서 가져올 수 있음)\nexport const strategies: Strategy[] = [\n  {\n    id: 'public-small',\n    name: '중소형 공공분양',\n    description: '공공주택 중 소형 평수 위주 청약',\n    minPoints: 40,\n    maxPoints: 100,\n    successRate: 75,\n    region: '전국',\n    householdType: 'single',\n    category: 'public',\n    difficulty: 'easy'\n  },\n  {\n    id: 'public-medium',\n    name: '중형 공공분양',\n    description: '공공주택 중형 평수 청약',\n    minPoints: 60,\n    maxPoints: 100,\n    successRate: 60,\n    region: '전국',\n    householdType: 'couple',\n    category: 'public',\n    difficulty: 'medium'\n  },\n  {\n    id: 'private-special',\n    name: '민간 특별공급',\n    description: '민간분양 특별공급 청약',\n    minPoints: 70,\n    maxPoints: 100,\n    successRate: 45,\n    region: '서울',\n    householdType: 'family',\n    category: 'private',\n    difficulty: 'hard'\n  },\n  {\n    id: 'local-public',\n    name: '지방 공공분양',\n    description: '지방 공공주택 청약',\n    minPoints: 30,\n    maxPoints: 100,\n    successRate: 85,\n    region: '지방',\n    householdType: 'single',\n    category: 'public',\n    difficulty: 'easy'\n  },\n  {\n    id: 'newlywed',\n    name: '신혼부부 특별공급',\n    description: '신혼부부 전용 특별공급',\n    minPoints: 50,\n    maxPoints: 100,\n    successRate: 70,\n    region: '전국',\n    householdType: 'couple',\n    category: 'special',\n    difficulty: 'medium'\n  },\n  {\n    id: 'youth-special',\n    name: '청년 특별공급',\n    description: '청년 전용 특별공급',\n    minPoints: 45,\n    maxPoints: 100,\n    successRate: 65,\n    region: '전국',\n    householdType: 'single',\n    category: 'special',\n    difficulty: 'medium'\n  }\n];\n\n// 시뮬레이션 실행\nexport const runSimulation = (userPoints: number, input: PointCalculationInput): SimulationResult => {\n  // 사용자 조건에 맞는 전략 필터링\n  const eligibleStrategies = strategies.filter(strategy => {\n    const pointsMatch = userPoints >= strategy.minPoints && userPoints <= strategy.maxPoints;\n    const householdMatch = strategy.householdType === input.householdType || strategy.householdType === 'single';\n    const regionMatch = strategy.region === '전국' || strategy.region === input.region;\n    \n    return pointsMatch && householdMatch && regionMatch;\n  });\n\n  // 추천 전략 (성공률 높은 순)\n  const recommendedStrategies = eligibleStrategies\n    .sort((a, b) => b.successRate - a.successRate)\n    .slice(0, 3);\n\n  // 대안 전략 (가점 요구사항이 낮은 순)\n  const alternativeStrategies = strategies\n    .filter(strategy => strategy.minPoints < userPoints)\n    .sort((a, b) => a.minPoints - b.minPoints)\n    .slice(0, 3);\n\n  // 전체 성공 확률 계산\n  const avgSuccessRate = eligibleStrategies.length > 0 \n    ? eligibleStrategies.reduce((sum, strategy) => sum + strategy.successRate, 0) / eligibleStrategies.length\n    : 0;\n\n  return {\n    userPoints,\n    recommendedStrategies,\n    alternativeStrategies,\n    successProbability: avgSuccessRate\n  };\n};\n\n// 전략별 상세 정보\nexport const getStrategyDetails = (strategyId: string): Strategy | undefined => {\n  return strategies.find(strategy => strategy.id === strategyId);\n};\n\n// 난이도별 색상\nexport const getDifficultyColor = (difficulty: string): string => {\n  switch (difficulty) {\n    case 'easy': return '#4CAF50';\n    case 'medium': return '#FF9800';\n    case 'hard': return '#F44336';\n    default: return '#757575';\n  }\n};\n\n// 성공률별 색상\nexport const getSuccessRateColor = (rate: number): string => {\n  if (rate >= 70) return '#4CAF50';\n  if (rate >= 50) return '#FF9800';\n  return '#F44336';\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}